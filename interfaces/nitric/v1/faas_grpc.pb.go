// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaasClient is the client API for Faas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaasClient interface {
	// Begin streaming triggers/response to/from the membrane
	TriggerStream(ctx context.Context, opts ...grpc.CallOption) (Faas_TriggerStreamClient, error)
}

type faasClient struct {
	cc grpc.ClientConnInterface
}

func NewFaasClient(cc grpc.ClientConnInterface) FaasClient {
	return &faasClient{cc}
}

func (c *faasClient) TriggerStream(ctx context.Context, opts ...grpc.CallOption) (Faas_TriggerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Faas_ServiceDesc.Streams[0], "/nitric.faas.v1.Faas/TriggerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &faasTriggerStreamClient{stream}
	return x, nil
}

type Faas_TriggerStreamClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type faasTriggerStreamClient struct {
	grpc.ClientStream
}

func (x *faasTriggerStreamClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *faasTriggerStreamClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FaasServer is the server API for Faas service.
// All implementations must embed UnimplementedFaasServer
// for forward compatibility
type FaasServer interface {
	// Begin streaming triggers/response to/from the membrane
	TriggerStream(Faas_TriggerStreamServer) error
	mustEmbedUnimplementedFaasServer()
}

// UnimplementedFaasServer must be embedded to have forward compatible implementations.
type UnimplementedFaasServer struct {
}

func (UnimplementedFaasServer) TriggerStream(Faas_TriggerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerStream not implemented")
}
func (UnimplementedFaasServer) mustEmbedUnimplementedFaasServer() {}

// UnsafeFaasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaasServer will
// result in compilation errors.
type UnsafeFaasServer interface {
	mustEmbedUnimplementedFaasServer()
}

func RegisterFaasServer(s grpc.ServiceRegistrar, srv FaasServer) {
	s.RegisterService(&Faas_ServiceDesc, srv)
}

func _Faas_TriggerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaasServer).TriggerStream(&faasTriggerStreamServer{stream})
}

type Faas_TriggerStreamServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type faasTriggerStreamServer struct {
	grpc.ServerStream
}

func (x *faasTriggerStreamServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *faasTriggerStreamServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Faas_ServiceDesc is the grpc.ServiceDesc for Faas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Faas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.faas.v1.Faas",
	HandlerType: (*FaasServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TriggerStream",
			Handler:       _Faas_TriggerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "faas/v1/faas.proto",
}
