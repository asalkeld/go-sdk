// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	// Push a single event to a queue
	Push(ctx context.Context, in *QueuePushRequest, opts ...grpc.CallOption) (*QueuePushResponse, error)
	// Push multiple events to a queue
	BatchPush(ctx context.Context, in *QueueBatchPushRequest, opts ...grpc.CallOption) (*QueueBatchPushResponse, error)
	// Pop event(s) off a queue
	Pop(ctx context.Context, in *QueuePopRequest, opts ...grpc.CallOption) (*QueuePopResponse, error)
	// Complete an event previously popped from a queue
	Complete(ctx context.Context, in *QueueCompleteRequest, opts ...grpc.CallOption) (*QueueCompleteResponse, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) Push(ctx context.Context, in *QueuePushRequest, opts ...grpc.CallOption) (*QueuePushResponse, error) {
	out := new(QueuePushResponse)
	err := c.cc.Invoke(ctx, "/nitric.v1.queues.Queue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) BatchPush(ctx context.Context, in *QueueBatchPushRequest, opts ...grpc.CallOption) (*QueueBatchPushResponse, error) {
	out := new(QueueBatchPushResponse)
	err := c.cc.Invoke(ctx, "/nitric.v1.queues.Queue/BatchPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Pop(ctx context.Context, in *QueuePopRequest, opts ...grpc.CallOption) (*QueuePopResponse, error) {
	out := new(QueuePopResponse)
	err := c.cc.Invoke(ctx, "/nitric.v1.queues.Queue/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) Complete(ctx context.Context, in *QueueCompleteRequest, opts ...grpc.CallOption) (*QueueCompleteResponse, error) {
	out := new(QueueCompleteResponse)
	err := c.cc.Invoke(ctx, "/nitric.v1.queues.Queue/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
// All implementations must embed UnimplementedQueueServer
// for forward compatibility
type QueueServer interface {
	// Push a single event to a queue
	Push(context.Context, *QueuePushRequest) (*QueuePushResponse, error)
	// Push multiple events to a queue
	BatchPush(context.Context, *QueueBatchPushRequest) (*QueueBatchPushResponse, error)
	// Pop event(s) off a queue
	Pop(context.Context, *QueuePopRequest) (*QueuePopResponse, error)
	// Complete an event previously popped from a queue
	Complete(context.Context, *QueueCompleteRequest) (*QueueCompleteResponse, error)
	mustEmbedUnimplementedQueueServer()
}

// UnimplementedQueueServer must be embedded to have forward compatible implementations.
type UnimplementedQueueServer struct {
}

func (UnimplementedQueueServer) Push(context.Context, *QueuePushRequest) (*QueuePushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedQueueServer) BatchPush(context.Context, *QueueBatchPushRequest) (*QueueBatchPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPush not implemented")
}
func (UnimplementedQueueServer) Pop(context.Context, *QueuePopRequest) (*QueuePopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedQueueServer) Complete(context.Context, *QueueCompleteRequest) (*QueueCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedQueueServer) mustEmbedUnimplementedQueueServer() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s grpc.ServiceRegistrar, srv QueueServer) {
	s.RegisterService(&_Queue_serviceDesc, srv)
}

func _Queue_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.v1.queues.Queue/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Push(ctx, req.(*QueuePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_BatchPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueBatchPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).BatchPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.v1.queues.Queue/BatchPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).BatchPush(ctx, req.(*QueueBatchPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.v1.queues.Queue/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Pop(ctx, req.(*QueuePopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.v1.queues.Queue/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).Complete(ctx, req.(*QueueCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.v1.queues.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Queue_Push_Handler,
		},
		{
			MethodName: "BatchPush",
			Handler:    _Queue_BatchPush_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _Queue_Pop_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _Queue_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/queues.proto",
}
